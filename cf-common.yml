AWSTemplateFormatVersion: 2010-09-09

Resources:

  # -----------------------------------
  # Create IoT Credentials Role Alias
  # 
  IoTAuthorizedDirectCallsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - credentials.iot.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'
        - 'arn:aws:iam::aws:policy/ResourceGroupsandTagEditorReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AWSGreengrassFullAccess'

  CustomResourceIoTRoleAliasExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - iot.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - iot:*
                  - iam:GetRole
                  - iam:PassRole
                Resource: "*"
  CustomResourceIoTRoleAliasFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.handler"
      Role: { "Fn::GetAtt": [ "CustomResourceIoTRoleAliasExecutionRole", "Arn" ] }
      Timeout: "25"
      Runtime: "nodejs6.10"
      Code:
        ZipFile: >
          var response = require('cfn-response');
          var AWS = require('aws-sdk');
          var iot = new AWS.Iot();
          var ssm = new AWS.SSM();

          exports.handler = function(event, context) {
            console.log("Event:", JSON.stringify(event, null, 2));

            var iotParams = {
              roleAlias: 'iot-gg-dev-pipeline-role'
            };

            switch(event.RequestType) {
              case 'Create':
                iotParams.roleArn = event.ResourceProperties.roleArn;
                iotParams.credentialDurationSeconds = 3600;                
                iot.createRoleAlias(iotParams, function(err, responseData) {
                  if (err) {
                    console.log('ERROR: FAILED TO CREATE ROLE ALIAS');
                    console.log(err, err.stack); // an error occurred
                    response.send(event, context, response.FAILED, responseData);
                  } else {
                    console.log('SUCCESS: ROLE ALIAS CREATED');
                    console.log(JSON.stringify(responseData, null, 2));
                    response.send(event, context, response.SUCCESS, responseData);
                  }
                });
                break;
              case 'Delete':
                iot.deleteRoleAlias(iotParams, function(err, responseData) {
                  if (err) {
                    console.log('ERROR: FAILED TO DELETE ROLE ALIAS');
                    console.log(err, err.stack); // an error occurred
                    response.send(event, context, response.FAILED, responseData);
                  } else {
                    console.log('SUCCESS: ROLE ALIAS DELETED');
                    console.log(JSON.stringify(responseData, null, 2));
                    response.send(event, context, response.SUCCESS, responseData);
                  }
                });
                break;
              default:
                console.error('Not supported');
                response.send(event, context, response.FAILED, null);
                break;
            }
          };
  CreateCustomIoTResources:
    Type: Custom::CreateCustomIoTResources
    Properties:
      ServiceToken: !GetAtt CustomResourceIoTRoleAliasFunction.Arn
      roleArn: { "Fn::GetAtt": [ "IoTAuthorizedDirectCallsRole", "Arn" ] }
  # 
  # -----------------------------------

  # -----------------------------------
  # Create SSM Activation and Document
  #
  SSMManagedInstancesRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'

  CustomResourceSSMExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - ssm.amazonaws.com
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ssm:*
                  - cloudformation:*
                  - iam:GetRole
                  - iam:PassRole
                Resource: "*"
  CustomResourceSSMFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.handler"
      Role: { "Fn::GetAtt": [ "CustomResourceSSMExecutionRole", "Arn" ] }
      Timeout: "25"
      Runtime: "nodejs6.10"
      Code:
        ZipFile: >
          var response = require('cfn-response');
          var AWS = require('aws-sdk');
          var cloudformation = new AWS.CloudFormation();
          var ssm = new AWS.SSM();

          exports.handler = function(event, context) {
            console.log("Event:", JSON.stringify(event, null, 2));

            switch(event.RequestType) {
              case 'Create':                
                var ssmParams = {
                  IamRole: event.ResourceProperties.IamRole,
                  DefaultInstanceName: 'ggDPManagedInstance',
                  RegistrationLimit: 1
                };
                ssm.createActivation(ssmParams, function(err, responseData) {
                  if (err) {
                    console.log('ERROR: FAILED TO CREATE SSM ACTIVATION');
                    console.log(err, err.stack); // an error occurred
                    response.send(event, context, response.FAILED, responseData);
                  } else {
                    console.log('SUCCESS: SSM ACTIVATION CREATED');
                    console.log(JSON.stringify(responseData, null, 2));
                    response.send(event, context, response.SUCCESS, responseData);
                  }
                });
                break;
              case 'Delete':
                var cfParams = {
                  StackName: event.ResourceProperties.StackName
                };
                cloudformation.describeStacks(cfParams, function(err, data) {
                  if (err) {
                    console.log('ERROR: FAILED TO GET CLOUDFORMATION DATA');
                    console.log(err, err.stack); // an error occurred
                    response.send(event, context, response.FAILED, data);
                  } else {
                    console.log('SUCCESS: CLOUDFORMATION DATA RECEIVED. Getting ouptuts');
                    console.log(JSON.stringify(data, null, 2));
                    var outputs = data.Stacks[0].Outputs;
                    console.log(outputs);
                    var ActivationId = null;
                    outputs.forEach(function(output) {
                      console.log(output.OutputKey, output.OutputValue);
                      if (output.OutputKey === 'SSMActivationId') ActivationId = output.OutputValue;
                    });
                    if (ActivationId) {
                      console.log('Deleting ActivationId:', ActivationId);
                      var ssmParams = {
                        ActivationId: ActivationId
                      };
                      ssm.deleteActivation(ssmParams, function(err, responseData) {
                        if (err) {
                          console.log('ERROR: FAILED TO DELETE SSM ACTIVATION');
                          console.log(err, err.stack); // an error occurred
                          response.send(event, context, response.FAILED, responseData);
                        } else {
                          console.log('SUCCESS: SSM ACTIVATION DELETED');
                          console.log(JSON.stringify(responseData, null, 2));
                          response.send(event, context, response.SUCCESS, responseData);
                        }
                      });
                    } else {
                      console.log('ERROR: No activation id found ???');
                      response.send(event, context, response.FAILED, data);
                    }
                  }
                });
                break;
              default:
                console.error('Not supported');
                response.send(event, context, response.FAILED, null);
                break;
            }
          };
  CreateCustomSSMResources:
    Type: Custom::CreateCustomSSMResources
    Properties:
      ServiceToken: !GetAtt CustomResourceSSMFunction.Arn
      IamRole: !Ref SSMManagedInstancesRole
      StackName: !Ref AWS::StackName
  #
  # -----------------------------------


Outputs:
  SSMActivationId:
    Description: SSM Activation ID
    Value: { "Fn::GetAtt": [ "CreateCustomSSMResources", "ActivationId" ] }
  SSMActivationCode:
    Description: SSM Activation Code
    Value: { "Fn::GetAtt": [ "CreateCustomSSMResources", "ActivationCode" ] }
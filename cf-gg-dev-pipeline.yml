AWSTemplateFormatVersion: 2010-09-09
Description: Helper CloudFormation to create the dev-pipeline
Parameters:
  CFCommonStackName:
    Description: Cloudformation Stack name for the common setup
    Type: String
    Default: gg-dev-pipeline-common
  GitHubOwner:
    Description: GitHub account username.
    Type: String
    Default: teuteuguy
  GitHubRepo:
    Description: Just the Github repository name.
    Type: String
    Default: gg-dev-pipeline
  GitHubBranch:
    Description: The branch that will trigger build/deploy.
    Type: String
    Default: master
  GitHubOAuthToken:
    Description: OAuth or personal access token.
    Type: String
    NoEcho: true
  GGGroupName:
    Description: Greengrass Group Name for this dev pipeline function
    Type: String
    Default: APACDonkeyCar
Resources:
  GGDevPipelineSSMDocument:
    Type: 'AWS::SSM::Document'
    Properties:
      Content:
        schemaVersion: '1.2'
        description: 'SSM Document that clones a github repo, and makes it'
        parameters:
          gitRepositoryURL:
            type: String
            description: (Required) The github PUBLIC repo that will be used.
          iotCredentialEndpoint:
            type: String
            description: (Required) Your account AWS IOT get credentials endpoint.
          ggGroupName:
            type: String
            description: (Required) The GG Group Name
          lambdaFunctionName:
            type: String
            description: (Required) The Lambda function name
        runtimeConfig:
          'aws:runShellScript':
            properties:
              - id: '0.aws:runShellScript'
                runCommand:
                  - '#!/bin/bash'
                  - set -e
                  - rm -rf /tmp/repo
                  - 'git clone {{ gitRepositoryURL }} /tmp/repo'
                  - cd /tmp/repo
                  - 'export IOT_CREDENTIAL_ENDPOINT={{ iotCredentialEndpoint }}'
                  - 'export IOT_GG_GROUP_NAME={{ ggGroupName }}'
                  - 'export LAMBDA_FUNCTION_NAME={{ lambdaFunctionName }}'
                  - make
  GGDevPipelineFunctionExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  GGDevPipelineFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt 
        - GGDevPipelineFunctionExecutionRole
        - Arn
      Timeout: '25'
      Runtime: nodejs6.10
      Tags:
        - Key: gg-dev-pipeline
          Value: !Ref 'AWS::StackName'
        - Key: type
          Value: lambda
      Code:
        ZipFile: |
          exports.handler = function(event, context, callback) {
            console.log("Event:", JSON.stringify(event, null, 2));
            callback(null, "Hello world!");
          };
  GGDevPipelineFunctionFirstVersion:
    Type: 'AWS::Lambda::Version'
    Properties:
      FunctionName: !Ref GGDevPipelineFunction
      Description: This is the first published version of my function
  Alias:
    Type: 'AWS::Lambda::Alias'
    Properties:
      FunctionName: !Ref GGDevPipelineFunction
      FunctionVersion: !GetAtt 
        - GGDevPipelineFunctionFirstVersion
        - Version
      Name: gg-dev-pipeline
  ArtifactBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
  CodeBuildRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: CodeBuildRolePolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource: !Sub >-
              arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
          - Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${ArtifactBucket}'
              - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:GetObjectVersion'
          - Effect: Allow
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CodeBuild/*'
            Action:
              - 'ssm:GetParameters'
          - Effect: Allow
            Resource: '*'
            Action:
              - 'ssm:DescribeInstanceInformation'
              - 'iot:DescribeEndpoint'
              - 'ssm:SendCommand'
              - 'ssm:GetCommandInvocation'
      Roles:
        - !Ref CodeBuildRole
  CodeBuild:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/ubuntu-base:14.04'
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: GITHUB_REPO_URL
            Value: !Join 
              - /
              - - 'https:/'
                - !Join
                  - '@'
                  - - !Ref GitHubOAuthToken
                    - 'github.com'
                - !Ref GitHubOwner
                - !Ref GitHubRepo
          - Name: SSM_DOCUMENT
            Value: !Ref GGDevPipelineSSMDocument
          - Name: PIPELINE_NAME
            Value: !Ref 'AWS::StackName'
          - Name: GG_GROUP_NAME
            Value: !Ref GGGroupName
          - Name: LAMBDA_FUNCTION_NAME
            Value: !Ref GGDevPipelineFunction
          - Name: SSM_ACTIVATION_ID
            Value: !ImportValue 
              'Fn::Sub': '${CFCommonStackName}-SSMActivationId'
      Name: !Sub '${AWS::StackName}-CodeBuild'
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
      Tags:
        - Key: Stack
          Value: !Ref 'AWS::StackName'
      TimeoutInMinutes: 10
  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
  CodePipelineRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: CodePipelineRolePolicy
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:GetBucketVersioning'
            Resource: '*'
            Effect: Allow
          - Action:
              - 's3:PutObject'
            Resource:
              - !Sub 'arn:aws:s3:::${ArtifactBucket}'
              - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
            Effect: Allow
          - Action:
              - 'codebuild:BatchGetBuilds'
              - 'codebuild:StartBuild'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref CodePipelineRole
  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Ref 'AWS::StackName'
      RoleArn: !GetAtt 
        - CodePipelineRole
        - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              OutputArtifacts:
                - Name: LambdaSourceCode
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuild
              InputArtifacts:
                - Name: LambdaSourceCode
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              OutputArtifacts:
                - Name: StaticSiteProd
              Configuration:
                ProjectName: !Ref CodeBuild
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket

  CustomResourceAddLambdaToGGExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - greengrass.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'greengrass:*'
                  - 'iam:GetRole'
                  - 'iam:PassRole'
                Resource: '*'
  CustomResourceAddLambdaToGGFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt 
        - CustomResourceAddLambdaToGGExecutionRole
        - Arn
      Timeout: '30'
      Runtime: nodejs6.10
      Code:
        ZipFile: >
          var AWS = require('aws-sdk');
          var greengrass = new AWS.Greengrass();
          const uuidv4 = require('uuid/v4');

          exports.handler = (event, context, callback) => {
              greengrass.listGroups().promise().then(function(groups) {
                  var group = groups.Groups.find(function(g) {
                      return (g.Name === event.ResourceProperties.GroupName);
                  });
                  if (!group) throw new Error('Group non existant');
                  else return greengrass.getGroup({GroupId: group.Id}).promise();
              }).then(function(group) {
                  return greengrass.getGroupVersion({
                      GroupId: group.Id,
                      GroupVersionId: group.LatestVersion
                  }).promise();
              }).then(function(groupVersion) {
                  var FunctionDefinitionVersionArn = groupVersion.Definition.FunctionDefinitionVersionArn;
                  if (!FunctionDefinitionVersionArn) {
                      // Current group does not have a function definition yet
                      console.log('Need to work on this');
                  } else {
                      var FunctionDefinitionId = FunctionDefinitionVersionArn.split('/greengrass/definition/functions/')[1].split('/versions/')[0];
                      var FunctionDefinitionVersionId = FunctionDefinitionVersionArn.split('/greengrass/definition/functions/')[1].split('/versions/')[1];
                      return Promise.all([groupVersion, greengrass.getFunctionDefinitionVersion({
                          FunctionDefinitionId: FunctionDefinitionId,
                          FunctionDefinitionVersionId: FunctionDefinitionVersionId
                      }).promise()]);
                  }
              }).then(function(response) {
                  var groupVersion = response[0];
                  var functionDefinitionVersion = response[1];
                  var FunctionDefinitionId = functionDefinitionVersion.Id;
                  var Functions = functionDefinitionVersion.Definition.Functions;
                  if (event.RequestType === 'Create') {
                      Functions.push({
                          FunctionArn: event.ResourceProperties.LambdaARN,
                          FunctionConfiguration: {
                            Environment: {},
                            MemorySize: 16384,
                            Pinned: false,
                            Timeout: 3
                          },
                          Id: uuidv4()
                      });
                  } else if (event.RequestType === 'Delete') {
                      Functions = Functions.filter(function(func) {
                          return (func.FunctionArn !== event.ResourceProperties.LambdaARN);
                      });            
                  }
                  return Promise.all([groupVersion, greengrass.createFunctionDefinitionVersion({
                    FunctionDefinitionId: FunctionDefinitionId,
                    Functions: Functions
                  }).promise()]);
              }).then(function(response) {
                  var groupVersion = response[0];
                  var createFunctionDefinitionVersionResponse = response[1];
                  var createGroupVersionParams = {
                    GroupId: groupVersion.Id,
                    FunctionDefinitionVersionArn: createFunctionDefinitionVersionResponse.Arn
                  };
                  if (groupVersion.Definition.CoreDefinitionVersionArn) createGroupVersionParams.CoreDefinitionVersionArn = groupVersion.Definition.CoreDefinitionVersionArn;
                  if (groupVersion.Definition.DeviceDefinitionVersionArn) createGroupVersionParams.DeviceDefinitionVersionArn = groupVersion.Definition.DeviceDefinitionVersionArn;
                  if (groupVersion.Definition.LoggerDefinitionVersionArn) createGroupVersionParams.LoggerDefinitionVersionArn = groupVersion.Definition.LoggerDefinitionVersionArn;
                  if (groupVersion.Definition.ResourceDefinitionVersionArn) createGroupVersionParams.ResourceDefinitionVersionArn = groupVersion.Definition.ResourceDefinitionVersionArn;
                  if (groupVersion.Definition.SubscriptionDefinitionVersionArn) createGroupVersionParams.SubscriptionDefinitionVersionArn = groupVersion.Definition.SubscriptionDefinitionVersionArn;
                  return greengrass.createGroupVersion(createGroupVersionParams).promise();
              }).then(function(response) {
                  callback(null, 'SUCCESS'); 
              }).catch(function(error) {
                  callback(null, 'ERROR'); 
              });
          };

  CreateCustomAddLambdaToGGResources:
    Type: 'Custom::CreateCustomAddLambdaToGGResources'
    Properties:
      ServiceToken: !GetAtt 
        - CustomResourceAddLambdaToGGFunction
        - Arn
      LambdaARN: !Join
        - ':'
        - - !Ref GGDevPipelineFunction
          - !Ref Alias
